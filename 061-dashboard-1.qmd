# Dashboard (1) {#sec-chap061}


```{r}
#| label: setup
#| results: hold
#| include: false

base::source(file = "R/helper.R")
ggplot2::theme_set(ggplot2::theme_bw())
```


::::: {#obj-chap061}
:::: {.my-objectives}
::: {.my-objectives-header}
Objectives
:::

::: {.my-objectives-container}

In this chapter I will learn to use the {**bslib**} package to create a Shiny dashboard for my `r glossary("RWB")` project.



:::
::::
:::::

## Functionality

I am thinking on a dashboard with the following functionalities:

1. Central are three display modes:
    - **Map**: Presenting maps, similar as on the [RSF Homepage](https://rsf.org/en/index).
    - **Chart**: Presenting chars to show the development over the years. There is no equivalent at the RSF website. You can see an example at the `r glossary("WHR")` Dashboard under the [subsection "Charts"](https://data.worldhappiness.report/chart). 
    - **Country** Presenting details about a specific country. Again the RSF website has no equivalence, but you got an idea after choosing a particular country under the subsection "Countries". See as an [example Austria](https://data.worldhappiness.report/country/AUT).
2. These three modes are essentially different, because they need diverse additional information (parameters):
    1. **Map Mode**:
        - `Year`: Allow only one year for map.
        - `Score`: One of the available scores:    
            - The *global score* for the years 2013-2025.   
            - The *components scores* for the years 2022-2025.   
        - `Ranking`: Not allowed (or later perhaps a map of the ranking differences between two years?)
        - `Region`: is allowed with map mode, but takes the chosen map and zooms into the selected region. Similar as in [WHR website](https://data.worldhappiness.report/map) by choosing "Map" and the select by "Filter by region".
        - `Country`: Select one or more of the available countries (because filtered by region was choose, then only the countries of this region are eligible.
    2. **Chart Mode**:
        - `Year`: Default is all available years, but the user can alternatively (de)select years.
        - `Score`: One of the available scores:    
            - The *global score* for the years 2013-2025 (default), but (de)selecting years is possible.  
            - The *components scores* for the years 2022-2025 (default), but (de)selecting years is possible.
        - `Ranking`: Alternatively with `Score` All year is default, but (de)selecting years is possible. 
        - `Region`: One region is eligible. Default is all countries.
        - `Country`: One or more countries are eligible. If a region is filtered then one can add other countries or deselect some countries from the region.
    3. **Country**: Overview about different parameters. Which parameters is still to decide. First approximation (see [example Austria](https://data.worldhappiness.report/country/AUT)):
        - All three modes are not available!
            - `Score chart`: Global and component scores over all available years
            - `Ranking chart`: Global and component rankings over all available years
            - `Value boxes`: Current, highest, lowest, average, medium, biggest climb, biggest fall (only rankings and global score)
            
## Design

I am condensing the most important section for my project of the {**bslib**} [Dashboard](https://rstudio.github.io/bslib/articles/dashboards/index.html) article.

### Plainest design

There only three layout elements available in the standard layout: 

- the *title*, 
- the *sidebar* for the controls and 
- the *main content* area.

::: {.column-page}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-061-dashboard-most-simple}
: UI elements of the most simple dashboard
::::::
:::
::::{.my-r-code-container}


```{shinylive-r}
#| standalone: true
#| viewerHeight: 350
#| components: [editor, viewer]

library(shiny)
library(bslib)

ui <- page_sidebar(
  title = "Title for the dashboard",
  sidebar = "Sidebar for the contols (input)",
  "Main content area"
)

shinyApp(ui, function(input, output) {})
```


::::
:::::

::: 

::: {.callout-tip #tip-061-shinylieve-interaction}
##### How to interact with the `shinylive-r` output?

In the above first example there is only a minimal interaction possible. Clicking on the right top arrow in the sidebar (**<**) will close the sidebar and therefore enlarge the main content area. 
But in this {**shinylive**} mode you can also change the code and rerun the program by clicking on the top right filled arrow (▶). Try it out to change one of the text strings.
:::

### Minimum content

> Both the `sidebar` and main content areas can hold any arbitrary collection of UI elements, but it’s good practice to keep inputs in the `sidebar` and outputs in the main content area. Also, consider wrapping outputs in a `card()` and sidebar contents in a `sidebar()` object to add a `title` and/or customize styling, positioning, etc.

::: {.column-page}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-061-dashboard-most-simple}
: UI elements of the most simple dashboard
::::::
:::
::::{.my-r-code-container}


```{shinylive-r}
#| standalone: true
#| viewerHeight: 500
#| components: [editor, viewer]

library(shiny)
library(bslib)

ui <- page_sidebar(
  title = "Title for the whole dashboard",
  sidebar = sidebar(
    title = "Controls / Input"
  ),
  card(
    card_header("Title for the current card"),
    textOutput("txt")
  )
)

server <-  function(input, output) {
  output$txt <- renderText({
    "This is the main area (of the card)"
  })
}

shinyApp(ui, server)
```


::::
:::::

::: 

Even with the minimum card content we needed about 15 code lines. This is just a simple template. All parts can be arbitrary complex 
- `title()` could be for example a complex expression
- `sidebar()` can hold many input controls and directives for the layout (e.g., several cards in a specific arrangement),
- `card()` can hold complex results and 
`server()` is the most tricky part, because it needs reactivity (`reactive()` functions) to work together with the input controls.



::: {.callout-tip #tip-061-minimum-as-template}
###### Minimum content as template

I have developed a template as an `r glossary("snippet", "RStudio snippet")` with the minimum content example. I am using it to start new Shiny apps or a `shinylive-r` code chunks.
:::


I will stop here with the minimum content example. It works as a template for new apps resp. `shinylive-r` code chunks. But there are still to cover many other {**bslib**} design features and functions. Whenever the need arises I will either come back here to this section or write my notes in the appropriate project section. 


## RWB project

In the {**bslib**} documentation there is a basic example of a customizable histogram with numeric variables from the {**palmerpenguins**} dataset. I will use my own `rwb` dataset to display different line charts for global scores and rankings for selected countries or regions.

My aim is to go step by step from the simple to the more complex, e.g. to start with a line chart for one country and one variable, followed for several variables and finally with several countries. For my own learning purpose I will also use four different modes:

| Program | Helper | Shiny | Abbr. |
|---------|--------|-------|-------|
| ggplot2 | only   | ----- | GO-   |
| plotly  | only   | ----- | PO-   |
| ggplot2 | with   | Shiny | GWS   |
| plotly  | with   | Shiny | PWS   |
: Four modes with rising complexity {#tbl-modes} {.striped}


The final product should always be an interactive graph using {**plotly**} in an web application environment controlled by {**shiny**} PWS.

In the first try I will not give attention to legend and theme but one: `theme_set(theme_bw())` 

::: {.callout-important #imp-061-rw-project-rules}
###### Conventions

To facilitate learning I will apply in this book three conventions:

1. To get a better overview of all necessary code lines, I will load the necessary data, functions and packages in every code chunk.
2. To make it easier for references I will not use [Quarto tabsets](https://quarto.org/docs/output-formats/html-basics.html#tabsets), because only the content of the visible tab can be cross referenced.
3. I will develop the `shinylive-r` code chunks in as separate Shiny app because then I have all available the debug tools. Then I will include the content of the finished app into the `shinylive-r` code chunk with

`## file: app.R`       
`{{< include path-to/app.R >}}`

:::

### GO- line chart

The easiest line chart is a graph showing the development of one variable over the years for one country. I will take the variable `score` for the global score showing the trend for my own country Austria (`country_en == "Austria`). 

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-061-go--line-chart}
: `GO-` Using {ggplot2} (without Shiny) for a line chart
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: go--line-chart
#| lst-label: lst-go--line-chart
#| fig-cap: "Development of the global World Press Freedom Index (WPFI) of Austria with {ggplot2}: `GO-`"
#| lst-cap: "One numeric variable (Score) with one factor variable (Country Name) using {ggplot2}: `GO-`"

library(ggplot2)
library(dplyr, warn.conflicts = FALSE)

rwb <- readRDS(paste0(here::here(), "/data/chap011/rwb/rwb.rds"))

p <- rwb |> 
  select(year_n, country_en, score) |> 
  filter(country_en == "Austria") |> 
  na.omit() |>
  ggplot(aes(year_n, score)) +
    geom_line()
p
```

::::
:::::

### PO- line chart

The easiest line chart is a graph showing the development of one variable over the years for one country. I will take the variable `score` for the global score showing the trend for my own country Austria (`country_en == "Austria`). 

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-061-po--line-chart}
: `PO-` Using {plotly} (without Shiny) for a line chart
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: po--line-chart
#| lst-label: lst-po--line-chart
#| fig-cap: "Development of the global World Press Freedom Index (WPFI) of Austria with {plotly}: `PO-`"
#| lst-cap: "One numeric variable (Score) with one factor variable (Country Name) using {plotly}: `GO-`"

library(plotly, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)

rwb <- readRDS(paste0(here::here(), "/data/chap011/rwb/rwb.rds"))

p <- rwb |> 
  select(year_n, country_en, score) |> 
  filter(country_en == "Austria") |> 
  na.omit() |>
  plot_ly(
    x = ~year_n, 
    y = ~score, 
    type = 'scatter', 
    mode = 'lines')
p
```

::::
:::::

::: {.callout-note #nte-061-suppress-warnings}
###### How to suppress warnings?

During the process of loading and attaching the two packages ({**dplyr**} and {**plotly**}) I have used `warn.conflicts = FALSE` to suppress warnings. This is special for these two packages. A general command would have been `base::suppressWarnings()`.
:::

### GWS line chart

Now I have to think about the input control(s) for the user. In this first simple example I will only provide to choose one country, specifically only *one* country. The variable is with `score` still the same.


::: {.column-screen}



:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-061-gws-line-chart-1}
: Choose country to display WPFI for all available years
::::::
:::
::::{.my-r-code-container}

```{shinylive-r}
#| standalone: true
#| viewerHeight: 750
#| components: [editor, viewer]
#| layout: vertical

## file: app.R
{{< include app-061-gws-line-chart-1/app.R >}}

```

::::
:::::

:::



## Glossary Entries {.unnumbered}

```{r}
#| label: glossary-table
#| echo: false

glossary_table()
```

------------------------------------------------------------------------

## Session Info {.unnumbered}

::: my-r-code
::: my-r-code-header
Session Info
:::

::: my-r-code-container
```{r}
#| label: session-info

sessioninfo::session_info()
```
:::
:::

