{
  "hash": "5efc0e8445b3fd3e90ab86970ec0ef3b",
  "result": {
    "engine": "knitr",
    "markdown": "# Design {#sec-chap060}\n\n\n\n\n\n::::: {#obj-chap060}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nObjectives\n:::\n\n::: {.my-objectives-container}\n\nIn this chapter I will design the user interface with {**bslib**}. I will provide data only if it necessary to show the functionality of the UI design. \n\n:::\n::::\n:::::\n            \n\nI am condensing the most important section for my project of the {**bslib**} [Dashboard](https://rstudio.github.io/bslib/articles/dashboards/index.html) article.\n\n### Plainest Design\n\nThere only three layout elements available in the standard layout: \n\n- the *title*, \n- the *sidebar* for the controls and \n- the *main content* area.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-060-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 350\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the dashboard\",\n  sidebar = \"Sidebar for the contols (input)\",\n  \"Main content area\"\n)\n\nshinyApp(ui, function(input, output) {})\n```\n\n\n::::\n:::::\n\n::: \n\n::: {.callout-tip #tip-060-shinylieve-interaction}\n##### How to interact with the `shinylive-r` output?\n\nIn the above first example there is only a minimal interaction possible. Clicking on the right top arrow in the sidebar (**<**) will close the sidebar and therefore enlarge the main content area. \nBut in this {**shinylive**} mode you can also change the code and rerun the program by clicking on the top right filled arrow (▶). Try it out to change one of the text strings.\n:::\n\n### Minimum content\n\n> Both the `sidebar` and main content areas can hold any arbitrary collection of UI elements, but it’s good practice to keep inputs in the `sidebar` and outputs in the main content area. Also, consider wrapping outputs in a `card()` and sidebar contents in a `sidebar()` object to add a `title` and/or customize styling, positioning, etc.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-060-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the whole dashboard\",\n  sidebar = sidebar(\n    title = \"Controls / Input\"\n  ),\n  card(\n    card_header(\"Title for the current card\"),\n    textOutput(\"txt\")\n  )\n)\n\nserver <-  function(input, output) {\n  output$txt <- renderText({\n    \"This is the main area (of the card)\"\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n::: \n\nEven with the minimum card content we needed about 15 code lines. This is just a simple template. All parts can be arbitrary complex \n- `title()` could be for example a complex expression\n- `sidebar()` can hold many input controls and directives for the layout (e.g., several cards in a specific arrangement),\n- `card()` can hold complex results and \n`server()` is the most tricky part, because it needs reactivity (`reactive()` functions) to work together with the input controls.\n\n\n\n::: {.callout-tip #tip-060-minimum-as-template}\n###### Minimum content as template\n\nI have developed a template as an <a class='glossary' title='An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html'>RStudio snippet</a> with the minimum content example. I am using it to start new Shiny apps or a `shinylive-r` code chunks.\n:::\n\n\nI will stop here with the minimum content example. It works as a template for new apps resp. `shinylive-r` code chunks. But there are still to cover many other {**bslib**} design features and functions. Whenever the need arises I will either come back here to this section or write my notes in the appropriate project section. \n\n\n\n\n## Glossary Entries {.unnumbered}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Snippet </td>\n   <td style=\"text-align:left;\"> An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> R version 4.5.1 (2025-06-13)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.6.1\n#> \n#> Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8\n#> \n#> Package version:\n#>   askpass_1.2.1      base64enc_0.1.3    bslib_0.9.0        cachem_1.1.0      \n#>   cli_3.6.5          commonmark_2.0.0   compiler_4.5.1     cpp11_0.5.2       \n#>   curl_7.0.0         digest_0.6.37      dplyr_1.1.4        evaluate_1.0.5    \n#>   farver_2.1.2       fastmap_1.2.0      fontawesome_0.5.3  fs_1.6.6          \n#>   generics_0.1.4     ggplot2_3.5.2      glossary_1.0.0     glue_1.8.0        \n#>   graphics_4.5.1     grDevices_4.5.1    grid_4.5.1         gtable_0.3.6      \n#>   highr_0.11         htmltools_0.5.8.1  htmlwidgets_1.6.4  httr_1.4.7        \n#>   isoband_0.2.7      jquerylib_0.1.4    jsonlite_2.0.0     kableExtra_1.4.0  \n#>   knitr_1.50         labeling_0.4.3     lattice_0.22.7     lifecycle_1.0.4   \n#>   litedown_0.7       magrittr_2.0.3     markdown_2.0       MASS_7.3.65       \n#>   Matrix_1.7.4       memoise_2.0.1      methods_4.5.1      mgcv_1.9.3        \n#>   mime_0.13          nlme_3.1.168       openssl_2.3.3      pillar_1.11.0     \n#>   pkgconfig_2.0.3    R6_2.6.1           rappdirs_0.3.3     RColorBrewer_1.1-3\n#>   renv_1.1.5         rlang_1.1.6        rmarkdown_2.29     rstudioapi_0.17.1 \n#>   rversions_2.1.2    rvest_1.0.5        sass_0.4.10        scales_1.4.0      \n#>   selectr_0.4.2      splines_4.5.1      stats_4.5.1        stringi_1.8.7     \n#>   stringr_1.5.1      svglite_2.2.1      sys_3.4.3          systemfonts_1.2.3 \n#>   textshaping_1.0.1  tibble_3.3.0       tidyselect_1.2.1   tinytex_0.57      \n#>   tools_4.5.1        utf8_1.2.6         utils_4.5.1        vctrs_0.6.5       \n#>   viridisLite_0.4.2  withr_3.0.2        xfun_0.53          xml2_1.4.0        \n#>   yaml_2.3.10\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}