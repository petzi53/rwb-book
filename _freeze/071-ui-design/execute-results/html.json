{
  "hash": "75b1cd2027376622057a46377495c62e",
  "result": {
    "engine": "knitr",
    "markdown": "# Design {#sec-chap071}\n\n\n\n\n\n::::: {#obj-chap071}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nObjectives\n:::\n\n::: {.my-objectives-container}\n\nIn this chapter I will design the user interface with {**bslib**}. I will provide data only if it necessary to show the functionality of the UI design. \n\n:::\n::::\n:::::\n            \n\nI am condensing the most important section for my project of the {**bslib**} [Dashboard](https://rstudio.github.io/bslib/articles/dashboards/index.html) article.\n\n## Plainest Design\n\nThere only three layout elements available in the standard layout: \n\n- the *title*, \n- the *sidebar* for the controls and \n- the *main content* area.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-071-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 350\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the dashboard\",\n  sidebar = \"Sidebar for the contols (input)\",\n  \"Main content area\"\n)\n\nshinyApp(ui, function(input, output) {})\n```\n\n\n::::\n:::::\n\n::: \n\n::: {.callout-tip #tip-071-shinylieve-interaction}\n##### How to interact with the `shinylive-r` output?\n\nIn the above first example there is only a minimal interaction possible. Clicking on the right top arrow in the sidebar (**<**) will close the sidebar and therefore enlarge the main content area. \nBut in this {**shinylive**} mode you can also change the code and rerun the program by clicking on the top right filled arrow (▶). Try it out to change one of the text strings.\n:::\n\n## Minimum content\n\n> Both the `sidebar` and main content areas can hold any arbitrary collection of UI elements, but it’s good practice to keep inputs in the `sidebar` and outputs in the main content area. Also, consider wrapping outputs in a `card()` and sidebar contents in a `sidebar()` object to add a `title` and/or customize styling, positioning, etc.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-071-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the whole dashboard\",\n  sidebar = sidebar(\n    title = \"Controls / Input\"\n  ),\n  card(\n    card_header(\"Title for the current card\"),\n    textOutput(\"txt\")\n  )\n)\n\nserver <-  function(input, output) {\n  output$txt <- renderText({\n    \"This is the main area (of the card)\"\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n::: \n\nEven with the minimum card content we needed about 15 code lines. This is just a simple template. All parts can be arbitrary complex \n- `title()` could be for example a complex expression\n- `sidebar()` can hold many input controls and directives for the layout (e.g., several cards in a specific arrangement),\n- `card()` can hold complex results and \n`server()` is the most tricky part, because it needs reactivity (`reactive()` functions) to work together with the input controls.\n\n\n\n::: {.callout-tip #tip-071-minimum-as-template}\n###### Minimum content as template\n\nI have developed a template as an <a class='glossary' title='An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html'>RStudio snippet</a> with the minimum content example. I am using it to start new Shiny apps or a `shinylive-r` code chunks.\n:::\n\n\nI will stop here with the minimum content example. It works as a template for new apps resp. `shinylive-r` code chunks. But there are still to cover many other {**bslib**} design features and functions. Whenever the need arises I will either come back here to this section or write my notes in the appropriate project section. \n\n## Variable & Countries\n\n::: {.column-screen}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-071-variable-and-countries}\n: Choose Variable and Countries\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-071-variable-and-countries}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n#| layout: horizontal\n\n## file: app.R\n## app-071-variable-countries\n\n\nlibrary(shiny)\nlibrary(bslib)\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\nui <- page_sidebar(\n    titlePanel(\"World Press Freedom Indices (WPFI)\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"variable\",\n            label = \"Score or Rank Type\",\n            choices = list(\n                `Press Freedom Score` = list(\n                    \"Global score\" = \"score\",\n                    \"Political Context\" = \"political_context\",\n                    \"Economic Context\" = \"economic_context\",\n                    \"Legal Framework\" = \"legal_context\",\n                    \"Sociocultural Context\" = \"social_context\",\n                    \"Safety\" = \"safety\"),\n                `Press Freedom Rank` = list(\n                    \"Global Rank\" = \"rank\",\n                    \"Political Rank\" = \"rank_pol\",\n                    \"Economic Rank\" = \"rank_eco\",\n                    \"Legal Rank\" = \"rank_leg\",\n                    \"Sociocultural Rank\" = \"rank_soc\",\n                    \"Safety Rank\" = \"rank_saf\")\n                )\n        ),\n        selectInput(\n            inputId = \"country\",\n            label = \"Countries\",\n            choices = unique(rwb$country_en),\n            multiple = TRUE\n        )\n    )\n)\n\nserver <-  function(input, output) {}\n\nshinyApp(ui, server)\n\n\n```\n\nChoose one of the main variable (score or rank) and one of its component\n\n::: \n::::\n:::::\n\n:::\n\n## Navigation {#sec-071-navigation}\n\n\n### General consideration\n\nIt turned out that an incremental construction of the user interface is not productive. To have one part of the UI working --- as I have succeeded in @lst-071-variable-and-countries --- does not prevent me from a complete overhaul of the navigation structure for other functionality. It is therefore better to start with the general UI structure and then to develop the dashboard functions for the different visualizations.\n\nFor instance: To compare several indicators of one country is a complete different approach than to compare the development of one value in different countries. Together with other approaches (presenting a heat map of all countries, or displaying all relevant indicators for one specific country) it shows the need of a choice distinction at the global level of the dashboard.\n\n### Components {#sec-071-navigation-components}\n\nIn @lst-071-variable-and-countries the user can choose between the main variable (score or rank) together with the global or component value. This UI has several disadvantages: \n\n1. **Different number of years**: For the global values 23 years (2022-2025 with 2011 missing) but for the component values we have currently (2025) only four years (2022-2025). This small number of years is not a  problem by itself, but it indicates a different methodological approach and significance.\n2. **Components belong together**: From a methodological point of view it is more relevant, that the user could only choose one component at a time. But the five components are forming one global value and therefore their relation is important for the interpretation. For instance it is important to know which of the five components had the most influence for a given change.\n\nIn my application transfer for line and bump charts with real data values (@sec-chap081) I have therefore limited the possible selection to just the global indicators of scores and ranks for a chosen set of countries.\n\n\n### Scores & ranks separated?\n\nIt was a nice feature in @lst-071-variable-and-countries that I can change between score and rank charts immediately, without adding countries again. But in this case I haven't differentiated between the two different kinds of graphs: line chart versus bump chart.  For this reason it is better to separate scores from ranks visualizations. Independently of this UI separation it should also possible to keep the country names constant whenever a user changes between these two different types of visualizations.\n\nAnother reason for the separation is the possibility to get another rank visualization by listing all countries by there ranks together with other information like rank values, flag, scores of global values and of component ranks. (At the moment there are only values for each components without a rank order of these component values. But these data shouldn't be difficult to compute.)\n\nImplementing this separation I have to abandon the idea of a navigation built on different visualization modes: maps, line charts and country information. Anyway, to distinguish modes is a idea far away from the everyday interests and practices of users. User want to know the scores, ranks etc. directly and not to think about the constitutional parts of abstract categories.\n\n### Missing features\n\nAt the moment I am missing some other possible features of my planned RWB dashboard:\n\n- **Years**: At the moment users can only select values for all years but it would be nice to select also a specific year, a span of years or a selection of specific years.\n- **Regions**: Currently user can select years but it would be important also to compare countries of a specific region or to contrast different regions.\n\n\n::: {.callout-caution #cau-071-limit-country-numbers}\n###### Limit number of countries to display at once\n\nI have used as color palette the `Paired` {**RColowBrewer**} palette with 12 colors. Adding countries should therefore be limited with 12 lines of different colors. More than 12 lines are difficult to distinguish, so it is a good practice to limit the number of countries.\n\nBut how is this limit to apply? I need to track down the number of countries chosen, because user can raise or reduce the number of countries. Besides of this functionality I would also need a message that explains why adding another countries after the limit of 12 is not allowed.\n:::\n\n### Ideas and plans\n\n#### `page_navbar()`\n\nAt first I thought that a [tabset with pill navigation](https://shiny.posit.co/r/layouts/tabs/) at the top of the UI together with the appropriate UI components in the sidebar was the best solution. But reading the [article on dashboards](https://rstudio.github.io/bslib/articles/dashboards/index.html) it turned out that not a multi-panel but a [multi-page approach](https://rstudio.github.io/bslib/articles/dashboards/index.html#multi-page) is better suited for my use case. This navigation strcuture uses `page_navbar()` to call with a series of `nav_panel()` functions different pages or sections of the app.\n\n#### `nav_panel()`\n\nAt first I had two problems to apply the `nav_panel()` function:\n\n1. I didn't know that I have to call the appropriate page/section within the `nav_panel()` function a second argument after the title.\n2. After I realized that the code for the page does not work on other places (e.g., in the `card()` function) I didn't know how to provide complex code as one argument of `nav_panel()`. The solution is to write a function outside of `nav_panel()` or even outside of `ui()` and `server()`.\n\n#### `sidebar()`\n\nAnother difficulty arose with the need of adapting the content of the `sidebar()`. Normally the code for the sidebar in a `page_navbar()` navigation is valid for all different pages/sections. But with the `conditionalPanel()` function this code can be adapted to match the need of the appropriate page.\n\n#### `conditionalPanel()`\n\nBut with `conditionalPanel()` I also had to overcome two difficulties:\n\n1. I didn't know how to build the connection between `conditionalPanel()` and `nav_panel()`. I learned that in both functions I had to use the same ID.\n2. I didn't know what the `===` sign mean. After an internet research it turned out that this is the equal-test in JavaScript. One has to use Javascript code to coincide `conditionalPanel()` with `nav_panel()`. For this reason one has to use a dot notation to call the input value of the `nav_panel()` ID (e.g., \"input.nav\") and not the common `$` operator. Because of the JavaScript notation one must also include the code into quotes and need therefore two quote levels (e.g., `\"input.nav === 'Country'\"`).\n\n\n## `page_navbar()` demo {#sec-071-page-navbar-demo}\n\n::: {.column-screen}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-071-page-navbar-demo}\n: `page_navbar()` demonstration with dummy values\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-071-page-navbar-demo}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## path: app-071-page-navbar-demo/app.R\n## my book: @sec-071-page-navbar-demo\n\n## suppressWarnings(suppressPackageStartupMessages({\n    library(shiny)\n    library(shinythemes)\n    library(bslib)\n## })) # these suppresion does not work with  shinylive-r\n\nsidebar_map <- layout_sidebar(\n    sidebar = \"Controls for map\"\n)\n\nsidebar_chart <- layout_sidebar(\n    sidebar = \"Control for chart\"\n)\n\nsidebar_country <- layout_sidebar(\n    sidebar = \"Control for country\"\n)\n\ncards <- list(\n    card(\n        full_screen = TRUE,\n        card_header(\"This is a map\"),\n    ),\n    card(\n        full_screen = TRUE,\n        card_header(\"This is a line chart\")\n    ),\n    card(\n        full_screen = TRUE,\n        card_header(\"This is country information\")\n    )\n)\n\nui <- page_navbar(\n    ## choose a bootstrap version and theme\n    ## only themes from {shinythemes} are allowed\n        ## cerulean, cosmo, cyborg, darkly, flatly, journal,\n        ## lumen, paper, readable, sandstone, simplex, slate,\n        ## spacelab, superhero, united, and yeti.\n    theme = bs_theme(5, bootswatch = \"cosmo\"),\n    ## next line does not work with shinylive-r\n    ## navbar_options = navbar_options(class = \"bg-primary\", theme = \"dark\"),\n    title = \"Reporters Without Borders\",\n    id = \"nav\",\n    sidebar = sidebar(\n        conditionalPanel(\n            \"input.nav === 'Map'\",\n            \"Map controls\"\n        ),\n        conditionalPanel(\n            \"input.nav === 'Chart'\",\n            \"Chart controls\"\n        ),\n        conditionalPanel(\n            \"input.nav === 'Country'\",\n            \"Country controls\"\n        )\n    ),\n    nav_spacer(),\n    nav_panel(\"Map\", cards[[1]]),\n    nav_panel(\"Chart\", cards[[2]]),\n    nav_panel(\"Country\", cards[[3]]),\n    nav_item(tags$a(\"About\", href = \"https://peter.baumgartner.name\", target=\"_blank\"))\n)\n\nserver <-  function(input, output) {}\n\nshinyApp(ui, server)\n\n\n```\n\nDemo of the planned navigation structure. For details see @sec-071-navigation\n\n::: \n::::\n:::::\n\n:::\n\n\n## Glossary Entries {.unnumbered}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Snippet </td>\n   <td style=\"text-align:left;\"> An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> R version 4.5.1 (2025-06-13)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.6.1\n#> \n#> Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8\n#> \n#> Package version:\n#>   askpass_1.2.1      base64enc_0.1.3    bslib_0.9.0        cachem_1.1.0      \n#>   cli_3.6.5          commonmark_2.0.0   compiler_4.5.1     cpp11_0.5.2       \n#>   curl_7.0.0         digest_0.6.37      dplyr_1.1.4        evaluate_1.0.5    \n#>   farver_2.1.2       fastmap_1.2.0      fontawesome_0.5.3  fs_1.6.6          \n#>   generics_0.1.4     ggplot2_3.5.2      glossary_1.0.0     glue_1.8.0        \n#>   graphics_4.5.1     grDevices_4.5.1    grid_4.5.1         gtable_0.3.6      \n#>   highr_0.11         htmltools_0.5.8.1  htmlwidgets_1.6.4  httr_1.4.7        \n#>   isoband_0.2.7      jquerylib_0.1.4    jsonlite_2.0.0     kableExtra_1.4.0  \n#>   knitr_1.50         labeling_0.4.3     lattice_0.22.7     lifecycle_1.0.4   \n#>   litedown_0.7       magrittr_2.0.3     markdown_2.0       MASS_7.3.65       \n#>   Matrix_1.7.4       memoise_2.0.1      methods_4.5.1      mgcv_1.9.3        \n#>   mime_0.13          nlme_3.1.168       openssl_2.3.3      pillar_1.11.0     \n#>   pkgconfig_2.0.3    R6_2.6.1           rappdirs_0.3.3     RColorBrewer_1.1-3\n#>   renv_1.1.5         rlang_1.1.6        rmarkdown_2.29     rstudioapi_0.17.1 \n#>   rversions_2.1.2    rvest_1.0.5        sass_0.4.10        scales_1.4.0      \n#>   selectr_0.4.2      splines_4.5.1      stats_4.5.1        stringi_1.8.7     \n#>   stringr_1.5.1      svglite_2.2.1      sys_3.4.3          systemfonts_1.2.3 \n#>   textshaping_1.0.1  tibble_3.3.0       tidyselect_1.2.1   tinytex_0.57      \n#>   tools_4.5.1        utf8_1.2.6         utils_4.5.1        vctrs_0.6.5       \n#>   viridisLite_0.4.2  withr_3.0.2        xfun_0.53          xml2_1.4.0        \n#>   yaml_2.3.10\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}