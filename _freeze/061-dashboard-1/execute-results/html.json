{
  "hash": "1c016a148ede5537305e0a5ea00e54d7",
  "result": {
    "engine": "knitr",
    "markdown": "# Dashboard: Line Charts {#sec-chap061}\n\n\n\n\n\n::::: {#obj-chap061}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nObjectives\n:::\n\n::: {.my-objectives-container}\n\nFor this chapter I have two objectives for my <a class='glossary' title='Reporters Without Borders (RWB), known by its French name Reporters sans frontières and acronym RSF, is an international non-profit and non-governmental organization headquartered in Paris, France, founded in 1985 in Montpellier by journalists Robert Ménard, Rémy Loury, Jacques Molénat, and Émilien Jubineau. It is dedicated to safeguarding the right to freedom of information and defends journalists and media personnel who are imprisoned, persecuted, or at risk for their work. The organization has consultative status at the United Nations, UNESCO, the Council of Europe, and the International Organisation of the Francophonie.'>RWB</a> project:\n\n1. I will learn to use the basic design with the {**bslib**} package: `title`, `sidebar` and `card` (see @sec-061-dashboard-design).\n2. I will experiment with the basics of building dynamic interactive line charts. This goal includes:\n  - **Line chart for one country**\n    - Without {**shiny**} \n      - Start: Chart with {*ggplot2*} (see @sec-061-go0).\n      - Medium: Chart with {**plotly**} using `ggplotly()` (see @sec-061-po0).\n    - With {**shiny**}\n      - Start: Line chart with {*ggplot2*} using {**shiny**} (see @sec-061-gws).\n      - Medium: Line chart with {**plotly**} using `ggplotly()` in {**shiny**} (see @sec-061-pws-ggplotly).\n      - Final: Line chart with the `plot_ly()` function in {**shiny**} (see @sec-061-pws-plotly).\n  - **Line chart for several countries with {shiny}**\n    - Only using native {**plotly**} functions.\n      - Adding countries one by one (see @sec-061-one-after-the-other).\n      - Choosing all countries together and displaying it via `actionButton()` (see @sec-061-with-action-button).\n\n\n\n:::\n::::\n:::::\n            \n## Design {#sec-061-dashboard-design}\n\nI am condensing the most important section for my project of the {**bslib**} [Dashboard](https://rstudio.github.io/bslib/articles/dashboards/index.html) article.\n\n### Plainest Design\n\nThere only three layout elements available in the standard layout: \n\n- the *title*, \n- the *sidebar* for the controls and \n- the *main content* area.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 350\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the dashboard\",\n  sidebar = \"Sidebar for the contols (input)\",\n  \"Main content area\"\n)\n\nshinyApp(ui, function(input, output) {})\n```\n\n\n::::\n:::::\n\n::: \n\n::: {.callout-tip #tip-061-shinylieve-interaction}\n##### How to interact with the `shinylive-r` output?\n\nIn the above first example there is only a minimal interaction possible. Clicking on the right top arrow in the sidebar (**<**) will close the sidebar and therefore enlarge the main content area. \nBut in this {**shinylive**} mode you can also change the code and rerun the program by clicking on the top right filled arrow (▶). Try it out to change one of the text strings.\n:::\n\n### Minimum content\n\n> Both the `sidebar` and main content areas can hold any arbitrary collection of UI elements, but it’s good practice to keep inputs in the `sidebar` and outputs in the main content area. Also, consider wrapping outputs in a `card()` and sidebar contents in a `sidebar()` object to add a `title` and/or customize styling, positioning, etc.\n\n::: {.column-page}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-dashboard-most-simple}\n: UI elements of the most simple dashboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Title for the whole dashboard\",\n  sidebar = sidebar(\n    title = \"Controls / Input\"\n  ),\n  card(\n    card_header(\"Title for the current card\"),\n    textOutput(\"txt\")\n  )\n)\n\nserver <-  function(input, output) {\n  output$txt <- renderText({\n    \"This is the main area (of the card)\"\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n::: \n\nEven with the minimum card content we needed about 15 code lines. This is just a simple template. All parts can be arbitrary complex \n- `title()` could be for example a complex expression\n- `sidebar()` can hold many input controls and directives for the layout (e.g., several cards in a specific arrangement),\n- `card()` can hold complex results and \n`server()` is the most tricky part, because it needs reactivity (`reactive()` functions) to work together with the input controls.\n\n\n\n::: {.callout-tip #tip-061-minimum-as-template}\n###### Minimum content as template\n\nI have developed a template as an <a class='glossary' title='An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html'>RStudio snippet</a> with the minimum content example. I am using it to start new Shiny apps or a `shinylive-r` code chunks.\n:::\n\n\nI will stop here with the minimum content example. It works as a template for new apps resp. `shinylive-r` code chunks. But there are still to cover many other {**bslib**} design features and functions. Whenever the need arises I will either come back here to this section or write my notes in the appropriate project section. \n\n\n## RWB Line Chart / One Country\n\nIn the {**bslib**} documentation there is a basic example of a customizable histogram with numeric variables from the {**palmerpenguins**} dataset. I will use my own `rwb` dataset to display different line charts for global scores and rankings for selected countries or regions.\n\nMy aim is to go step by step from the simple to the more complex, e.g. to start with a line chart for one country and one variable, followed for several variables and finally with several countries. For my own learning purpose I will also use four different modes:\n\n| Program | Helper | Shiny | Abbr. |\n|---------|--------|-------|-------|\n| ggplot2 | only   | ----- | GO0   |\n| plotly  | only   | ----- | PO0   |\n| ggplot2 | with   | Shiny | GWS   |\n| plotly  | with   | Shiny | PWS   |\n: Four modes with rising complexity {#tbl-modes} {.striped}\n\n\nThe final product should always be an interactive graph using {**plotly**} in an web application environment controlled by {**shiny**} PWS.\n\nIn the first try I will not give attention to legend and theme but one: `theme_set(theme_bw())` \n\n::: {.callout-important #imp-061-rw-project-rules}\n###### Conventions\n\nTo facilitate learning I will apply in this book three conventions:\n\n1. To get a better overview of all necessary code lines, I will load the necessary data, functions and packages in every code chunk.\n2. To make it easier for references I will not use [Quarto tabsets](https://quarto.org/docs/output-formats/html-basics.html#tabsets), because only the content of the visible tab can be cross referenced.\n3. I will develop the `shinylive-r` code chunks in as separate Shiny app because then I have all available the debug tools. Then I will include the content of the finished app into the `shinylive-r` code chunk with\n\n`## file: app.R`     \n`{{< include path-to/app.R >}}`\n\n\n:::\n\n### GO0 Line Chart {#sec-061-go0}\n\nThe easiest line chart is a graph showing the development of one variable over the years for one country. I will take the variable `score` for the global score showing the trend for my own country Austria (`country_en == \"Austria`). \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-go0-line-chart}\n: `GO0` Using {ggplot2} (without Shiny) for a line chart\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{#lst-go0-line-chart .r .cell-code  lst-cap=\"One numeric variable (Score) with one factor variable (Country Name) using `ggplot()`: `GO0`\"}\nlibrary(ggplot2)\nlibrary(dplyr, warn.conflicts = FALSE)\n\nrwb <- readRDS(paste0(here::here(), \"/data/chap011/rwb/rwb.rds\"))\n\np <- rwb |> \n  select(year_n, country_en, score) |> \n  filter(country_en == \"Austria\") |> \n  na.omit() |>\n  ggplot(aes(year_n, score)) +\n    geom_line()\n\np\n```\n\n::: {.cell-output-display}\n![Development of the global World Press Freedom Index (WPFI) of Austria with `ggplot()`: `GO0`](061-dashboard-1_files/figure-html/go0-line-chart-1.png){width=672}\n:::\n:::\n\n\n::::\n:::::\n\n### PO0 Line Chart {#sec-061-po0}\n\nThe UI is identical with @cnj-061-line-chart-gws-1. There are two ways to create a {**plotly**} line chart:\n\n1. **Convert `ggplot()` to `plotly()`**. This requires only one changes: Encapsulate the `ggplot2::ggplot()` object with `plotly::ggplotly()`.\n2. **Build a `plot_ly()` graph from scratch**. For me this requires to learn another syntax because my experience with {**plotly**} is currently very limited. But using this direct approach has some advantages:\n  - **Performance**: This is the primary limitation of `ggplotly()` compared to the native `plot_ly()`. The difference is huge: Depending on the graph `ggplotly()` is [23-143 (!) times slower](https://www.jumpingrivers.com/blog/comparing-plotly-ggplotly-plot-generation-times/) than `plot_ly()`.\n  - **Customization**: The outcome of `ggplotly()`is not always predictable and there is less control about the final graph compared with the native `plot_ly()` function.\n  \n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-ggplotly-line-chart}\n: `PO0`: Line chart with `ggplot()` and `ggplotly()` (without Shiny).\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{#lst-061-ggplotly-line-chart .r .cell-code  lst-cap=\"Line chart with `ggplot()` and `ggplotly()`\"}\nlibrary(plotly, warn.conflicts = FALSE)\nlibrary(dplyr, warn.conflicts = FALSE)\n\nrwb <- readRDS(paste0(here::here(), \"/data/chap011/rwb/rwb.rds\"))\n\np <- rwb |> \n  select(year_n, country_en, score) |> \n  filter(country_en == \"Austria\") |> \n  na.omit() |>\n  ggplot(aes(year_n, score)) +\n    geom_line()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-265c9f4b3fb4bfed9fa5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-265c9f4b3fb4bfed9fa5\">{\"x\":{\"data\":[{\"x\":[2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025],\"y\":[90.599999999999994,89.989999999999995,89.150000000000006,86.819999999999993,86.530000000000001,85.959999999999994,84.670000000000002,84.219999999999999,83.659999999999997,76.739999999999995,77.299999999999997,74.689999999999998,78.120000000000005],\"text\":[\"year_n: 2013<br />score: 90.60\",\"year_n: 2014<br />score: 89.99\",\"year_n: 2015<br />score: 89.15\",\"year_n: 2016<br />score: 86.82\",\"year_n: 2017<br />score: 86.53\",\"year_n: 2018<br />score: 85.96\",\"year_n: 2019<br />score: 84.67\",\"year_n: 2020<br />score: 84.22\",\"year_n: 2021<br />score: 83.66\",\"year_n: 2022<br />score: 76.74\",\"year_n: 2023<br />score: 77.30\",\"year_n: 2024<br />score: 74.69\",\"year_n: 2025<br />score: 78.12\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283108,\"r\":7.3059360730593621,\"b\":40.182648401826498,\"l\":37.260273972602747},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[2012.4000000000001,2025.5999999999999],\"tickmode\":\"array\",\"ticktext\":[\"2012.5\",\"2015.0\",\"2017.5\",\"2020.0\",\"2022.5\",\"2025.0\"],\"tickvals\":[2012.5,2015,2017.5,2020,2022.5,2025],\"categoryorder\":\"array\",\"categoryarray\":[\"2012.5\",\"2015.0\",\"2017.5\",\"2020.0\",\"2022.5\",\"2025.0\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"year_n\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[73.894499999999994,91.395499999999998],\"tickmode\":\"array\",\"ticktext\":[\"75\",\"80\",\"85\",\"90\"],\"tickvals\":[75,80,85,90],\"categoryorder\":\"array\",\"categoryarray\":[\"75\",\"80\",\"85\",\"90\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"score\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"layer\":\"below\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"41fc5159b6ac\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"41fc5159b6ac\",\"visdat\":{\"41fc5159b6ac\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nDevelopment of the global World Press Freedom Index (WPFI) of Austria with `ggplot()` and `ggplotly()`: `GO0`\n:::\n:::\n\n\n::::\n:::::\n  \n  \n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-po0-line-chart}\n: `PO0` Using {plotly} (without Shiny) for a line chart\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{#lst-po0-line-chart .r .cell-code  lst-cap=\"One numeric variable (Score) with one factor variable (Country Name) using {plotly}: `GO0`\"}\nlibrary(plotly, warn.conflicts = FALSE)\nlibrary(dplyr, warn.conflicts = FALSE)\n\nrwb <- readRDS(paste0(here::here(), \"/data/chap011/rwb/rwb.rds\"))\n\np <- rwb |> \n  select(year_n, country_en, score) |> \n  filter(country_en == \"Austria\") |> \n  na.omit() |>\n  plot_ly(\n    x = ~year_n, \n    y = ~score, \n    type = 'scatter', \n    mode = 'lines')\np\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-7bdfa5ef062fba86098d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7bdfa5ef062fba86098d\">{\"x\":{\"visdat\":{\"41fce336ceb\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"41fce336ceb\",\"attrs\":{\"41fce336ceb\":{\"x\":{},\"y\":{},\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"year_n\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"score\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[2025,2024,2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013],\"y\":[78.120000000000005,74.689999999999998,77.299999999999997,76.739999999999995,83.659999999999997,84.219999999999999,84.670000000000002,85.959999999999994,86.530000000000001,86.819999999999993,89.150000000000006,89.989999999999995,90.599999999999994],\"mode\":\"lines\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nDevelopment of the global World Press Freedom Index (WPFI) of Austria with {plotly}: `PO0`\n:::\n:::\n\n\n::::\n:::::\n\n::: {.callout-note #nte-061-suppress-warnings}\n###### How to suppress warnings?\n\nDuring the process of loading and attaching the two packages ({**dplyr**} and {**plotly**}) I have used `warn.conflicts = FALSE` to suppress warnings. This is special for these two packages. A general command would have been `base::suppressWarnings()`.\n:::\n\n### GWS Line Chart {#sec-061-gws}\n\nNow I have to think about the input control(s) for the user. In this first simple example I will only provide to choose one country, specifically only *one* country. The variable is with `score` still the same.\n\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-line-chart-gws-1}\n: `GWS` Choose country to display WPFI for all available years\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## app-061-line-chart-gws-1\n## Choose country to display WPFI for all available years (with ggplot)\n## @cnj-061-gws-line-chart-1\n\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(munsell)\nlibrary(dplyr)\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\ntheme_set(theme_bw())\n\nui <- page_sidebar(\n    titlePanel(\"Evolution of the World Press Freedom Index (WPFI) 2013-2025\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"country\",\n            label = \"Country\",\n            choices = unique(rwb$country_en)\n        )\n    ),\n    card(\n        card_header((textOutput(\"card_title\"))),\n        plotOutput(\"p\")\n    )\n)\n\nserver <- function(input, output, session) {\n    output$card_title <-  renderText({\n        paste(\"World Prees Freedom Index for\", input$country)\n    })\n\n    output$p <- renderPlot({\n        rwb |>\n            select(year_n, country_en, score) |>\n            filter(country_en == input$country) |>\n            na.omit() |>\n            ggplot(aes(year_n, score)) +\n            geom_line() +\n            geom_point()\n    })\n}\n\nshinyApp(ui, server)\n\n\n```\n\n::::\n:::::\n\n:::\n\n::: {.callout-important #imp-061-load-dataset}\n##### Loading files in Shinylive apps in Quarto\n\nI had problems to work with my RWB dataset. For `shinylive-r` code chunks is a special procedure necessary to load external data files: There are three ways to include files:\n\n1. You can embed text files in the code blocks. Not appropriate for me because `rwb` is a binary file.\n2. You can also embed binary files with a different procedure in the code blocks. But this option didn't work for me.\n3. Load the file via a http request. This worked for me.\n\nSee [Shinylive: Load file](https://github.com/quarto-ext/shinylive/blob/main/load_file.qmd)\n\n**How to include .rds file in shinylive** (from Brave KI)\n\nTo include an `.rds` file in a Shiny app hosted on the internet, you can load it directly from a public URL using the `readRDS` function combined with `gzcon` and `url` to handle the remote data stream. This method allows you to access the file without needing to download it locally first.\n\nFor example, if the `.rds` file is hosted on a public repository like GitHub, you can use the raw file URL:\n\n```r\ndata <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/username/repo/main/data/file.rds\")))\n```\n\nThis approach works because `url()` creates a connection to the remote file, `gzcon()` decompresses it if necessary, and `readRDS()` reads the R object from the connection  This method is particularly useful for deploying Shiny apps on platforms like shinyapps.io, where you can host the data file publicly and reference it directly in your app's server logic \n\nAlternatively, you can create a helper function to manage the remote loading process, which saves the file to a temporary local location before reading it, ensuring compatibility and reliability:\n\n```r\nreadRDS_remote <- function(file, quiet = TRUE) {\n  if (grepl(\"^http\", file, ignore.case = TRUE)) {\n    file_local <- file.path(tempdir(), basename(file))\n    download.file(file, file_local, quiet = quiet, mode = \"wb\")\n    file <- file_local\n  }\n  readRDS(file)\n}\n```\n\nThen use it as:\n\n```r\ndata <- readRDS_remote(\"https://example.com/data/file.rds\")\n```\n\nThis method is beneficial when dealing with large files or unreliable connections, as it ensures the file is fully downloaded before being read.\n\n:::\n\n\nIn addition to the line chart I have added two customizations:\n\n1. I added ggplot2::geom_point() on top of ´ggplot2::geom_line. The result is a [connected scatterplot](https://r-graph-gallery.com/connected_scatterplot_ggplot2.html). The page on the [R Graph Gallayer](https://r-graph-gallery.com) show other adaption as well, like custom circles and lines with arguments like `shape`, `size`, `color` and more.\n2. I added a dynamic title for the card container. The somewhat tricky part of this change is that you have to use the `paste()` function to put the static and dynamic parts of text string together in a reactive function (and not in UI).\n\n### PWS Line Chart {#sec-061-pws}\n\n#### Using `ggploty()` {#sec-061-pws-ggplotly}\n\nConverting a `ggplot()` to `plotly()` in a Shiny app requires three changes: \n\n- Encapsulate the `ggplot2::ggplot()` object with `plotly::ggplotly()`. This is the same change as in @lst-061-ggplotly-line-chart without Shiny. But there are other two additions necessary:\n(1) Change `plotOutput()` to `plotlyOutput()` and to\n(2) Change `renderPlot()` to `renderPlotly()`.\n\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-line-chart-pws-1a}\n: `PWS` Choose country to display WPFI for all available years with `ggplotly()`\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## app-061-line-chart-pws-1a\n## Choose country to display WPFI for all available years\n## Using ggplotly()\n## @cnj-061-ine-chart-pws-1a\n\nsuppressWarnings(suppressPackageStartupMessages({\n    library(shiny)\n    library(bslib)\n    library(ggplot2)\n    library(dplyr)\n    library(plotly)\n}))\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\ntheme_set(theme_bw())\n\nui <- page_sidebar(\n    titlePanel(\"Evolution of the World Press Freedom Index (WPFI) 2013-2025\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"country\",\n            label = \"Country\",\n            choices = unique(rwb$country_en)\n        )\n    ),\n    card(\n        card_header((textOutput(\"card_title\"))),\n        plotlyOutput(\"p\")                              # (1)\n    )\n)\n\nserver <- function(input, output, session) {\n    output$card_title <-  renderText({\n        paste(\"World Prees Freedom Index for\", input$country)\n    })\n\n    output$p <- renderPlotly({                         # (2)\n        rwb <- rwb |>\n            select(year_n, country_en, score) |>\n            filter(country_en == input$country) |>\n            na.omit() |>\n            ggplot(aes(year_n, score)) +\n            geom_line() +\n            geom_point()\n        ggplotly(rwb)\n    })\n}\n\nshinyApp(ui, server)\n\n\n```\n\n::::\n:::::\n:::\n\n#### Using `plot_ly()` {#sec-061-pws-plotly}\n\nThe second possibility is to use the native mode to {**plotly**}: Instead of converting a {**ggplot2**} graph to {**plotly**} we generate the interactive graph with `plotly::plot_ly()`.\n\nAs this is the more convenient approach to build interactive graphs for complex figures and dashboards computing several charts in parallel, from now on I will only display the native `plot_ly()` variant.\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-line-chart-pws-1b}\n: `PWS` Choose country to display WPFI for all available years with `plot_ly()`.\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## app-061-line-chart-pws-1b\n## Choose country to display WPFI for all available years\n## Using native plot_ly()\n## @cnj-061-ine-chart-pws-1b\n\nsuppressWarnings(suppressPackageStartupMessages({\n    library(shiny)\n    library(bslib)\n    library(dplyr)\n    library(plotly)\n}))\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\nui <- page_sidebar(\n    titlePanel(\"Evolution of the World Press Freedom Index (WPFI) 2013-2025\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"country\",\n            label = \"Country\",\n            choices = unique(rwb$country_en)\n        )\n    ),\n    card(\n        card_header((textOutput(\"card_title\"))),\n        plotlyOutput(\"p\")\n    )\n)\n\nserver <- function(input, output, session) {\n    output$card_title <-  renderText({\n        paste(\"World Prees Freedom Index for\", input$country)\n    })\n\n    output$p <- renderPlotly({\n        rwb |>\n            select(year_n, country_en, score) |>\n            filter(country_en == input$country) |>\n            na.omit() |>\n            plot_ly(\n                x = ~year_n,\n                y = ~score,\n                type = 'scatter',\n                mode = 'lines+markers')\n    })\n}\n\nshinyApp(ui, server)\n\n\n```\n\n::::\n:::::\n\n:::\n\n::: {.callout-important #nte-061-scatter-syntax}\n###### Some comments on the `plot_ly()` syntax\n\n1. Note that the `x` and `y` variable need in front the `~` sign. These are the data visualized as scatter point or lines in the `x` and `y` variable. \n2. Type `scatter` is a fundamental type for creating various visualizations such as scatter plots, line charts, but is also used for text and bubble charts. \n3. The `mode` attribute determines how the data is displayed, such as with markers, lines, text, or a combination of these. For example, setting `mode = \"line\"` creates a standard line plot as in @lst-po0-line-chart, while `mode = \"lines+markers\"` adds both lines connecting the points and markers at each point as in @cnj-061-line-chart-pws-1b.\n\n\n:::\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-061-scatter-syntax}\n: How to build line and scatter plots with {**plotly**}\n::::::\n:::\n::::{.my-resource-container}\n\n- [Examples for scatter and line plots](https://plotly.com/r/line-and-scatter/) can be found on the Plotly pages. \n- The [reference page on scatter](https://plotly.com/r/reference/scatter/) shows that the `scatter`type has a rich set of customization options.\n- For a more comprehensive instruction how to use the {**plotly**} R package read the authoritative resource [Interactive web-based data visualization with R, plotly, and shiny](https://plotly-r.com/) by Carson Sievert [@sievert2019].\n\n::::\n:::::\n\n## RWB Line Charts / Several Countries {#sec-061-several-countries}\n\n### One country after the other {#sec-061-one-after-the-other}\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-line-chart-pws-2}\n: Show development of WPFI for several countries at once\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## app-061-line-chart-pws-2\n## Choose several countries to display WPFI for all available years\n## @cnj-061-ine-chart-pws-2\n\nsuppressWarnings(suppressPackageStartupMessages({\n    library(shiny)\n    library(bslib)\n    library(dplyr)\n    library(plotly)\n}))\n\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\nui <- page_sidebar(\n    titlePanel(\"Evolution of the World Press Freedom Index (WPFI) 2013-2025\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"country\",\n            label = \"Choose countries\",\n            choices = unique(rwb$country_en),\n            multiple = TRUE\n        )\n    ),\n    card(\n        card_header((textOutput(\"card_title\"))),\n        plotlyOutput(\"p\")\n    )\n)\n\nserver <- function(input, output, session) {\n\n    output$card_title <-  renderText({\n        my_countries <- filter(countries(), country_en %in% input$country)\n        txt <- unique(my_countries$country_en)\n        s = paste(\"World Press Freedom Index:\", txt[1])\n        if (length(txt) > 1) {\n            for (i in 2:length(txt)) {\n                s <- paste(s, txt[i], sep = \", \")\n            }\n        }\n        s\n    })\n\n    countries <- reactive({\n        req(input$country)\n        rwb |>\n            select(year_n, score, country_en) |>\n            filter(country_en %in% input$country) |>\n            arrange(year_n) |>\n            na.omit() |>\n            droplevels()\n    })\n\n    output$p <- renderPlotly({\n        req(countries())\n        plotly::plot_ly(\n            data = countries(),\n            x = ~year_n,\n            y = ~score,\n            color = ~country_en,\n            colors = RColorBrewer::brewer.pal(12, \"Paired\"),\n            type = 'scatter',\n            mode = 'lines+markers',\n            marker = list(size = 10)\n        )\n    })\n}\n\nshinyApp(ui, server)\n\n\n\n\n```\n\n::::\n:::::\n::: \n\nThere are several important comments to make:\n\n1. At first I tried to disntinguish between the first trace (with `plot_ly()`) and all the other traces with `add_trace()`. But it turned out that I just need to set the argument `color` to the country vector.\n\n2. I had to adapt the card title so that it can display all names of the displayed countries.\n\n3. A big drawback is that the line color of the already chosen countries changes after another country is selected. So far I couldn't find a solution. After my question was [in StackOverflow not accepted](https://stackoverflow.com/questions/79757537/how-to-control-line-chart-colors-in-plotly-when-lines-are-added-via-shinyselec) (supposedly because it is a duplicate of another question), I posted in the [Posit Forum](https://forum.posit.co/t/how-to-control-line-chart-colors-in-plotly-when-lines-are-added-via-shiny-selectinput/206923) for help.\n\n### With `actionButton()` {#sec-061-with-action-button}\n\nA different UI would be adding an action button to delay the reaction. In this case the complete chart with all the chosen countries is drawn. So there is no irritation.\n\nBut in the next step when adding or removing the same problem recurs. Adding just one country results again in a distracting experience. It is a slighlty better whenever several countries are added, removed or changed.\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-061-line-chart-pws-3}\n: Show development of WPFI with delayed reaction via action button\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## app-061-line-chart-pws-3\n## Choose several countries to display WPFI for all available years\n## @cnj-061-ine-chart-pws-3\n\n\nsuppressWarnings(suppressPackageStartupMessages({\n    library(shiny)\n    library(bslib)\n    library(dplyr)\n    library(plotly)\n}))\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\nui <- page_sidebar(\n    titlePanel(\"Evolution of the World Press Freedom Index (WPFI) 2013-2025\"),\n    sidebar = sidebar(\n        selectInput(\n            inputId = \"country\",\n            label = \"Country\",\n            choices = unique(rwb$country_en),\n            multiple = TRUE\n        ),\n        actionButton(\"go\", \"Go!\", class = \"btn-success\")\n    ),\n    card(\n        card_header((textOutput(\"card_title\"))),\n        plotlyOutput(\"my_chart\")\n    )\n)\n\nserver <- function(input, output, session) {\n\n    output$card_title <-  renderText({\n        my_countries <- filter(countries(), country_en %in% input$country)\n        txt <- unique(my_countries$country_en)\n        s = paste(\"World Press Freedom Index for\", txt[1])\n        for (i in 2:length(txt)) {\n            s <- paste(s, txt[i], sep = \", \")\n        }\n        s\n    })\n\n    countries <- eventReactive(input$go, {\n        rwb |>\n            select(year_n, score, country_en) |>\n            filter(country_en %in% input$country) |>\n            arrange(year_n) |>\n            na.omit() |>\n            droplevels()\n    })\n\n    output$my_chart <- renderPlotly({\n        plotly::plot_ly(\n            data = countries(),\n            x = ~year_n,\n            y = ~score,\n            color = ~country_en,\n            colors = RColorBrewer::brewer.pal(12, \"Paired\"),\n            type = 'scatter',\n            mode = 'lines+markers',\n            marker = list(size = 10)\n        )\n    })\n}\n\nshinyApp(ui, server)\n\n\n\n\n```\n\n::::\n:::::\n::: \n\n\n## Glossary Entries {.unnumbered}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> RWB </td>\n   <td style=\"text-align:left;\"> Reporters Without Borders (RWB), known by its French name Reporters sans frontières and acronym RSF, is an international non-profit and non-governmental organization headquartered in Paris, France, founded in 1985 in Montpellier by journalists Robert Ménard, Rémy Loury, Jacques Molénat, and Émilien Jubineau. It is dedicated to safeguarding the right to freedom of information and defends journalists and media personnel who are imprisoned, persecuted, or at risk for their work. The organization has consultative status at the United Nations, UNESCO, the Council of Europe, and the International Organisation of the Francophonie. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Snippet </td>\n   <td style=\"text-align:left;\"> An RStudio snippet is a text macro or code template used to quickly insert commonly used pieces of code, automating the process of typing repetitive or boilerplate code. See: https://rstudio.github.io/rstudio-extensions/rstudio_snippets.html </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> R version 4.5.1 (2025-06-13)\n#> Platform: aarch64-apple-darwin20\n#> Running under: macOS Sequoia 15.6.1\n#> \n#> Locale: en_US.UTF-8 / en_US.UTF-8 / en_US.UTF-8 / C / en_US.UTF-8 / en_US.UTF-8\n#> \n#> Package version:\n#>   askpass_1.2.1      base64enc_0.1.3    bslib_0.9.0        cachem_1.1.0      \n#>   cli_3.6.5          commonmark_2.0.0   compiler_4.5.1     cpp11_0.5.2       \n#>   crosstalk_1.2.2    curl_7.0.0         data.table_1.17.8  digest_0.6.37     \n#>   dplyr_1.1.4        evaluate_1.0.5     farver_2.1.2       fastmap_1.2.0     \n#>   fontawesome_0.5.3  fs_1.6.6           generics_0.1.4     ggplot2_3.5.2     \n#>   glossary_1.0.0     glue_1.8.0         graphics_4.5.1     grDevices_4.5.1   \n#>   grid_4.5.1         gtable_0.3.6       here_1.0.1         highr_0.11        \n#>   htmltools_0.5.8.1  htmlwidgets_1.6.4  httr_1.4.7         isoband_0.2.7     \n#>   jquerylib_0.1.4    jsonlite_2.0.0     kableExtra_1.4.0   knitr_1.50        \n#>   labeling_0.4.3     later_1.4.4        lattice_0.22.7     lazyeval_0.2.2    \n#>   lifecycle_1.0.4    litedown_0.7       magrittr_2.0.3     markdown_2.0      \n#>   MASS_7.3.65        Matrix_1.7.4       memoise_2.0.1      methods_4.5.1     \n#>   mgcv_1.9.3         mime_0.13          nlme_3.1.168       openssl_2.3.3     \n#>   pillar_1.11.0      pkgconfig_2.0.3    plotly_4.11.0      promises_1.3.3    \n#>   purrr_1.1.0        R6_2.6.1           rappdirs_0.3.3     RColorBrewer_1.1-3\n#>   Rcpp_1.1.0         renv_1.1.5         rlang_1.1.6        rmarkdown_2.29    \n#>   rprojroot_2.1.1    rstudioapi_0.17.1  rversions_2.1.2    rvest_1.0.5       \n#>   sass_0.4.10        scales_1.4.0       selectr_0.4.2      splines_4.5.1     \n#>   stats_4.5.1        stringi_1.8.7      stringr_1.5.1      svglite_2.2.1     \n#>   sys_3.4.3          systemfonts_1.2.3  textshaping_1.0.1  tibble_3.3.0      \n#>   tidyr_1.3.1        tidyselect_1.2.1   tinytex_0.57       tools_4.5.1       \n#>   utf8_1.2.6         utils_4.5.1        vctrs_0.6.5        viridisLite_0.4.2 \n#>   withr_3.0.2        xfun_0.53          xml2_1.4.0         yaml_2.3.10\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [
      "061-dashboard-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.11.0/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.2/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.2/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}