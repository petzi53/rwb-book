{
  "hash": "b5fe680638fcc77cf16553ab2bcc22e7",
  "result": {
    "engine": "knitr",
    "markdown": "# New Navigation  {#sec-chap101}\n\n\n\n\n\n::::: {#obj-chap101}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n\n:::\n::::\n:::::\n\n\n::: {.column-screen}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-101-radar-chart-shiny}\n: Show line charts in new navigational structure\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n#| layout: vertical\n\n## file: app.R\n## path: app-071-page-navbar-line-chart/app.R\n## my book: @sec-071-page-navbar-line-chart\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(bslib)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(ggbump)\n\n\nrwb <- readRDS(gzcon(url(\"https://raw.githubusercontent.com/petzi53/rwb-book/master/data/chap011/rwb/rwb.rds\")))\n\n\nsidebar_map <- page_sidebar(\n    sidebar = \"Controls for map\"\n)\n\nsidebar_chart <- list(\n        selectInput(\n            inputId = \"var\",\n            label = \"Score or Rank Type\",\n            choices = c(\n                \"Global score\" = \"score\",\n                \"Global Rank\" = \"rank\"\n            )\n        ),\n        selectInput(\n            inputId = \"country\",\n            label = \"Countries\",\n            choices = unique(rwb$country_en),\n            multiple = TRUE\n            )\n)\n\n\nsidebar_country <- page_sidebar(\n    sidebar = \"Control for country\"\n)\n\ncards <- list(\n    card(\n        full_screen = TRUE,\n        card_header(\"This is a map\"),\n    ),\n    card(\n        full_screen = TRUE,\n        card_header((textOutput(\"card_title\"))),\n        plotlyOutput(\"p\")\n    ),\n    card(\n        full_screen = TRUE,\n        card_header(\"This is country information\")\n    )\n)\n\nui <- page_navbar(\n    theme = bs_theme(5, bootswatch = \"cosmo\"),\n    title = \"Reporters Without Borders\",\n    id = \"nav\",\n    sidebar = sidebar(\n        conditionalPanel(\n            \"input.nav === 'Map'\",\n            \"Map controls\"\n        ),\n        conditionalPanel(\n            \"input.nav === 'Chart'\",\n            sidebar_chart\n        ),\n        conditionalPanel(\n            \"input.nav === 'Country'\",\n            \"Country controls\"\n        )\n    ),\n    nav_spacer(),\n    nav_panel(\"Map\", cards[[1]]),\n    nav_panel(\"Chart\", cards[[2]]),\n    nav_panel(\"Country\", cards[[3]]),\n    nav_item(tags$a(\"About\",\n                    href = \"https://rsf.org/en/index\",\n                    target = \"_blank\"))\n)\n\nserver <-  function(input, output) {\n    pal = RColorBrewer::brewer.pal(12, \"Paired\")\n\n    countries <- reactive({\n        req(input$country)\n\n        output$card_title <-  renderText({\n            if (input$var == \"score\") {\n                s = \"Global Score for\"\n            }\n            if (input$var == \"rank\") {\n                s = \"Global Rank for\"\n            }\n            s = paste(s, input$country[1])\n            if (length(input$country)  > 1) {\n                for (i in 2:length(input$country)) {\n                    s <- paste(s, input$country[i], sep = \", \")\n                }\n            }\n            s\n        })\n\n        rwb |>\n            select(year_n, input$var, country_en, iso) |>\n            filter(country_en %in% input$country) |>\n            arrange(year_n) |>\n            na.omit() |>\n            droplevels()\n    })\n\n    output$p <- renderPlotly({\n        req(countries())\n        length(pal) <- length(input$country)\n        pal <- setNames(pal, input$country)\n        if (input$var == \"score\") {\n            plot <- plotly::plot_ly(\n                data = countries(),\n                x = ~year_n,\n                y = ~score,\n                color = ~country_en,\n                colors = pal,\n                type = 'scatter',\n                mode = 'lines+markers',\n                line = list(width = 4),\n                marker = list(size = 20)\n            )\n        }\n        if (input$var == \"rank\") {\n            plot <- ggplot(countries(),\n                           aes(x = year_n,\n                               y = rank,\n                               color = country_en)\n            ) +\n                geom_bump(linewidth = 1.0) +\n                geom_point(size = 5) +\n                geom_text(data = countries() |>  filter(year_n == min(year_n)),\n                          aes(label = iso), nudge_x = -1,\n                          size = 5, color = \"black\",\n                          hjust = 1) +\n                geom_text(data = countries() |> filter(year_n == max(year_n)),\n                          aes(label = iso), nudge_x = 1,\n                          size = 5, color = \"black\",\n                          hjust = 0) +\n                theme_bw() +\n                theme(legend.position = \"none\") +\n                scale_y_reverse(\n                    breaks = waiver(),\n                    n.breaks = 25) +\n                scale_colour_manual(values = pal)\n            plot <- ggplotly(plot)\n        }\n        plot\n    })\n}\n\nshinyApp(ui, server)\n\n\n```\n\n::::\n:::::\n:::\n\n\n\n\n## Glossary Entries {#unnumbered}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> data frame with 0 columns and 0 rows\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.5.1 (2025-06-13)\n#>  os       macOS Sequoia 15.6.1\n#>  system   aarch64, darwin20\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       Europe/Zagreb\n#>  date     2025-09-26\n#>  pandoc   3.7.0.2 @ /opt/homebrew/bin/ (via rmarkdown)\n#>  quarto   1.8.4 @ /usr/local/bin/quarto\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  cli           3.6.5      2025-04-23 [1] CRAN (R 4.5.0)\n#>  curl          7.0.0      2025-08-19 [1] CRAN (R 4.5.0)\n#>  digest        0.6.37     2024-08-19 [1] CRAN (R 4.5.0)\n#>  evaluate      1.0.5      2025-08-27 [1] CRAN (R 4.5.1)\n#>  fastmap       1.2.0      2024-05-15 [1] CRAN (R 4.5.0)\n#>  glossary    * 1.0.0.9003 2025-06-08 [1] local\n#>  htmltools     0.5.8.1    2024-04-04 [1] CRAN (R 4.5.0)\n#>  htmlwidgets   1.6.4      2023-12-06 [1] CRAN (R 4.5.0)\n#>  jsonlite      2.0.0      2025-03-27 [1] CRAN (R 4.5.0)\n#>  knitr         1.50       2025-03-16 [1] CRAN (R 4.5.0)\n#>  rlang         1.1.6      2025-04-11 [1] CRAN (R 4.5.0)\n#>  rmarkdown     2.29       2024-11-04 [1] CRAN (R 4.5.0)\n#>  rstudioapi    0.17.1     2024-10-22 [1] CRAN (R 4.5.0)\n#>  rversions     2.1.2      2022-08-31 [1] CRAN (R 4.5.0)\n#>  sessioninfo   1.2.3      2025-02-05 [1] CRAN (R 4.5.0)\n#>  xfun          0.53       2025-08-19 [1] CRAN (R 4.5.0)\n#>  xml2          1.4.0      2025-08-20 [1] CRAN (R 4.5.0)\n#>  yaml          2.3.10     2024-07-26 [1] CRAN (R 4.5.0)\n#> \n#>  [1] /Library/Frameworks/R.framework/Versions/4.5-arm64/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library\n#>  * ── Packages attached to the search path.\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}